/*
 * GUI
 */
package foodrecommend;

import static foodrecommend.FoodRecommend.app;
import static foodrecommend.FoodRecommend.ent;
import static foodrecommend.FoodRecommend.des;
import static foodrecommend.FoodRecommend.inputs;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

public class FoodGui extends javax.swing.JFrame {
    
//The variables for all food objects(Taking in as input from the user)
    double price = -1;
    String spice = "Mild";
    String hot = "Cold";
    int calorie = -1;
    String restrictions;
    
    String bread;
    String salad;
    String soup;
    String meat;
    String seafood;
    String noodles;
    String beverage;
    String fruit;
    String dessertother;
    
    boolean wantAppetizer = false;
    boolean wantEntree = false;
    boolean wantDessert = false;
    
//Variables that makes sure that the user has actually made inputs
    boolean typeReady = false;
    boolean preferencesReady = false;
    
    public FoodGui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        SpiceButton = new javax.swing.JRadioButton();
        hotButton = new javax.swing.JRadioButton();
        p = new javax.swing.JTextField();
        c = new javax.swing.JTextField();
        r = new javax.swing.JTextField();
        ButtonPreference = new javax.swing.JButton();
        ResetP = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        AButton = new javax.swing.JButton();
        EButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        DButton = new javax.swing.JButton();
        ResetType = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        AppetizerType = new javax.swing.JTextField();
        EntreeType = new javax.swing.JTextField();
        DessertType = new javax.swing.JTextField();
        currentType = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        IncorrectInput = new javax.swing.JTextArea();
        readyButton = new javax.swing.JButton();
        ClearAll = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        FinalOutput = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 250, 240));

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("Monaco", 3, 13)); // NOI18N
        jTextArea3.setRows(5);
        jTextArea3.setText("PLEASE FOLLOW THE INSTRUCTIONS BELOW!\nInputs of incorrect format will not be accepted.");
        jScrollPane2.setViewportView(jTextArea3);

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setText("1. If you would like spicy food, press the spicy button.\n\n2. If you would like hot food, press the hot button.\n\n3.To enter your preferences, please enter the calorie and price that you would prefer.\n       To enter calorie, please enter an integer in this format: (Eg:400)\n       To enter price, please enter a number in this format: (Eg: 10.00)\n       To enter restrictions, please type in Meat/Gluten/Peanuts/None. If you have multiple \n       restricions, please seperate them with a semicolon (e.g. meat;gluten)\n\nAFTER CHOOSING YOUR PREFERENCES PRESS THE 'ENTRE PREFERENCES' BUTTON!");
        jScrollPane6.setViewportView(jTextArea2);

        SpiceButton.setText("Spicy");
        SpiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SpiceButtonActionPerformed(evt);
            }
        });

        hotButton.setText("Hot");
        hotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hotButtonActionPerformed(evt);
            }
        });

        p.setText("Price");
        p.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pActionPerformed(evt);
            }
        });

        c.setText("Calories");
        c.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cActionPerformed(evt);
            }
        });

        r.setText("Restrictions");
        r.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rActionPerformed(evt);
            }
        });

        ButtonPreference.setText("Enter Preferences");
        ButtonPreference.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonPreferenceActionPerformed(evt);
            }
        });

        ResetP.setText("Reset Calories, Price and Restricions");
        ResetP.setToolTipText("");
        ResetP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetPActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("4. Decide what type of meal you would like (Appetizers/Entree/Desserts).\n\n5. Enter the type of food that you would like in the Food Type: textboxes.\n\tFor appetizers, the food types are bread / salad / soup.\n\tFor entree, the food types are meat / seafood / noodles.\n\tFor dessert, the food types are beverages / fruits / other.\n\nAFTER TYPING YOUR CHOICE, PRESS THE CORRESPONDING MEAL TYPE BUTTON \n(e.g. type in \"bread\", press Appetizer)");
        jScrollPane1.setViewportView(jTextArea1);

        AButton.setText("Appetizer");
        AButton.setToolTipText("");
        AButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AButtonActionPerformed(evt);
            }
        });

        EButton.setText("Entree");
        EButton.setToolTipText("");
        EButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Meal Type:");

        DButton.setText("Dessert");
        DButton.setToolTipText("");
        DButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DButtonActionPerformed(evt);
            }
        });

        ResetType.setText("Reset Type");
        ResetType.setToolTipText("");
        ResetType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetTypeActionPerformed(evt);
            }
        });

        jLabel5.setText("Food Type:");

        AppetizerType.setText("Appetizer Type");
        AppetizerType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AppetizerTypeActionPerformed(evt);
            }
        });

        EntreeType.setText("Entree Type");
        EntreeType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EntreeTypeActionPerformed(evt);
            }
        });

        DessertType.setText("Dessert Type");
        DessertType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DessertTypeActionPerformed(evt);
            }
        });

        currentType.setText("Current type: None");
        currentType.setToolTipText("");
        currentType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentTypeActionPerformed(evt);
            }
        });

        IncorrectInput.setEditable(false);
        IncorrectInput.setColumns(20);
        IncorrectInput.setRows(5);
        jScrollPane3.setViewportView(IncorrectInput);

        readyButton.setText("Click here if you are ready to go.");
        readyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readyButtonActionPerformed(evt);
            }
        });

        ClearAll.setText("Clear All Inputs");
        ClearAll.setToolTipText("");
        ClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearAllActionPerformed(evt);
            }
        });

        FinalOutput.setEditable(false);
        FinalOutput.setColumns(20);
        FinalOutput.setRows(5);
        jScrollPane4.setViewportView(FinalOutput);

        jLabel6.setText("OUTPUT:");

        jLabel3.setText("Input Status:");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                        .add(31, 31, 31)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(jScrollPane6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
                                .add(jPanel1Layout.createSequentialGroup()
                                    .add(124, 124, 124)
                                    .add(jLabel2))
                                .add(jScrollPane2))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(6, 6, 6)
                                .add(SpiceButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(hotButton)
                                .add(26, 26, 26)
                                .add(p, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(33, 33, 33)
                                .add(c, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(26, 26, 26)
                                .add(r, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(26, 26, 26)
                                .add(ButtonPreference, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 140, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                        .add(28, 28, 28)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 581, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(ResetP))
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(jPanel1Layout.createSequentialGroup()
                                    .add(jLabel3)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                        .add(jPanel1Layout.createSequentialGroup()
                                            .add(readyButton)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 104, Short.MAX_VALUE)
                                            .add(ClearAll))
                                        .add(jScrollPane3)))
                                .add(jPanel1Layout.createSequentialGroup()
                                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel4)
                                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel5))
                                    .add(18, 18, 18)
                                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                        .add(jPanel1Layout.createSequentialGroup()
                                            .add(AButton)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .add(EButton))
                                        .add(jPanel1Layout.createSequentialGroup()
                                            .add(AppetizerType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 121, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(18, 18, 18)
                                            .add(EntreeType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                                    .add(18, 18, 18)
                                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                        .add(jPanel1Layout.createSequentialGroup()
                                            .add(DessertType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                            .add(18, 18, 18)
                                            .add(currentType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 142, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                        .add(jPanel1Layout.createSequentialGroup()
                                            .add(DButton)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .add(ResetType)
                                            .add(10, 10, 10))))
                                .add(jPanel1Layout.createSequentialGroup()
                                    .add(jLabel6)
                                    .add(37, 37, 37)
                                    .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 494, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))))
                .add(0, 22, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 45, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 180, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(SpiceButton)
                    .add(hotButton)
                    .add(p, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(c, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(r, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(ButtonPreference))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ResetP)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 164, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(34, 34, 34)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(currentType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(DessertType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(EntreeType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(AppetizerType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(AButton)
                            .add(EButton)
                            .add(DButton)
                            .add(ResetType)
                            .add(jLabel4))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel5)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(readyButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(ClearAll)))
                    .add(jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(19, 19, 19)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(0, 14, Short.MAX_VALUE)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//The button preference button is designed to take in the preferences input, including calorie, price and restritions
    private void ButtonPreferenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonPreferenceActionPerformed

        String currentInput;
        
        //Taking in the price input
        currentInput = p.getText();
        price = Double.parseDouble(p.getText());
        
        //Checking if the format of price input is correct or not
        if(checkIntegerDouble(currentInput).equals("integer")!=true
                && checkIntegerDouble(currentInput).equals("double")!=true){
            IncorrectInput.setText("Input failed. Price Input format is incorrect.");
        }
        
        else if(price <= 2 || price >= 22){
            IncorrectInput.setText("Input failed. Enter a price between $2 and $22.");
        }
        
        else{
      
            //If the price input is correct format, take in input
            
            
        //Taking in the calorie input
            currentInput = c.getText();
            if(checkIntegerDouble(currentInput).equals("integer")!=true){
                IncorrectInput.setText("Input failed. Calorie Input format is incorrect.");
            }
            else{
       //If the calorie input is correct format, take in input
                calorie = Integer.parseInt(currentInput);
                currentInput = r.getText();
                
                
       //Taking in the restrictions:
                if(!currentInput.equalsIgnoreCase("Meat")&& !currentInput.equalsIgnoreCase("Peanut")&&!currentInput.equalsIgnoreCase("Gluten") 
                        &&!currentInput.equalsIgnoreCase("None")&&!
                        currentInput.equalsIgnoreCase("Meat;Peanut")&&!currentInput.equalsIgnoreCase("Meat;Gluten")
                        &&!currentInput.equalsIgnoreCase("Peanut;Gluten")&&!currentInput.equalsIgnoreCase("Peanut;Meat")&&!
                        currentInput.equalsIgnoreCase("Gluten;Meat")&&!currentInput.equalsIgnoreCase("Gluten;Peanut")&&!
                        currentInput.equalsIgnoreCase("Meat;Peanut;Gluten")&&!currentInput.equalsIgnoreCase("Meat;Gluten;Peanut")
                        &&!currentInput.equalsIgnoreCase("Gluten;Peanut;Meat")&&!currentInput.equalsIgnoreCase("Gluten;Meat;Peanut")
                        &&!currentInput.equalsIgnoreCase("Peanut;Meat;Gluten")&&!currentInput.equalsIgnoreCase("Peanut;Gluten;Meat"))
                {
                    IncorrectInput.setText("Incorrect format. Please retype your restrictions(meat/peanut/gluten/none)");
                }
       //If the restricion input is correct format, take in input
                else{
                    restrictions = currentInput;
                    
      //All preferences input are of correct format, change preferenceReady and output successful sign
                    preferencesReady = true;
                    IncorrectInput.setText("Successful input"); 
                }
            }
            
        }
        
    }//GEN-LAST:event_ButtonPreferenceActionPerformed

    private void EButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EButtonActionPerformed
        String currentInput;
        //If you have selected other kinds of food
        if(typeReady == true && wantEntree == false){
            IncorrectInput.setText("Incorrect format. You have already selected a type of food.\n"
                    + "Please reset the food types before entering.");
        }
        
        //If you have not selected other kinds of food
        else{
            wantEntree = true;
            currentType.setText("Current type: Entree");

            // Get specific food type from the user
            currentInput = EntreeType.getText();
            
            //If the food type is of incorrect format
            if((currentInput.equalsIgnoreCase("meat")||currentInput.equalsIgnoreCase("seafood")||
                    currentInput.equalsIgnoreCase("noudles"))!= true){
                IncorrectInput.setText("Incorrect format. Please retype:"
                        + "meat/seafood/noodles");
            }
            
            //Take in correct format food type
            else{
                
                typeReady = true;
                IncorrectInput.setText("Successful input ("+currentInput+")");
                
                if(currentInput.equalsIgnoreCase("Meat")){
                    ent[0] = "Y";
                    ent[1] = "N";
                    ent[2] = "N";   
                    meat = "meat";
                }
                else if(currentInput.equalsIgnoreCase("Seafood")){
                    ent[0] = "N";
                    ent[1] = "Y";
                    ent[2] = "N";   
                    seafood = "seafood";
                }
                else if(currentInput.equalsIgnoreCase("Noodles")){
                    ent[0] = "N";
                    ent[1] = "N";
                    ent[2] = "Y";     
                    noodles = "noodles";
                }
            } 
        }
    }//GEN-LAST:event_EButtonActionPerformed

    private void AButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AButtonActionPerformed
        // TODO add your handling code here:
        String currentInput;
        //If you have selected other kinds of food
        if(typeReady == true && wantAppetizer == false){
            IncorrectInput.setText("Incorrect format. You have already selected a type of food.\n"
                    + "Please reset the food types before entering.");
        }
        else{
            wantAppetizer = true;
;
            currentType.setText("Current type: Appetizers");
            
            // Get specific food type from the user
            currentInput = AppetizerType.getText();
            
            //If the food type is of incorrect format
            if((currentInput.equalsIgnoreCase("Salad")||currentInput.equalsIgnoreCase("Bread")||
                    currentInput.equalsIgnoreCase("Soup"))!= true){
                IncorrectInput.setText("Incorrect format. Please retype:"
                        + "salad/bread/soup");
            }
            
            //Take in correct format food type
            else{
                    typeReady = true;
                    IncorrectInput.setText("Successful input ("+currentInput+")");
                    
                    if(currentInput.equalsIgnoreCase("Bread")){
                        app[0] = "Y";
                        app[1] = "N";
                        app[2] = "N";
                        bread = "bread";
                    }
                    else if(currentInput.equalsIgnoreCase("Salad")){
                        app[0] = "N";
                        app[1] = "Y";
                        app[2] = "N";     
                        salad = "salad";
                    }
                    else if(currentInput.equalsIgnoreCase("Soup")){
                        app[0] = "N";
                        app[1] = "N";
                        app[2] = "Y";
                        soup = "soup";
                    } 
            }
        }
    }//GEN-LAST:event_AButtonActionPerformed

    private void DButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DButtonActionPerformed
        String currentInput;
        
        //If you have selected other kinds of food
        if(typeReady == true && wantDessert == false){
            IncorrectInput.setText("Incorrect format. You have already selected a type of food.\n"
                    + "Please reset the food types before entering.");
        }
        else{
            wantDessert = true;
            
            currentType.setText("Current type: Desserts");
            
            // Get specific food type from the user
            currentInput = DessertType.getText();
            
            //If the food type is of incorrect format
            if((currentInput.equalsIgnoreCase("beverage")||currentInput.equalsIgnoreCase("fruit")||
                    currentInput.equalsIgnoreCase("other"))!= true){
                IncorrectInput.setText("Incorrect format. Please retype: beverage/fruit/other");
            }
            
            //Take in correct format food type
            else{
                typeReady = true;
                IncorrectInput.setText("Successful input ("+currentInput+")");
                if(currentInput.equalsIgnoreCase("Beverage")){
                    des[0] = "Y";
                    des[1] = "N";
                    des[2] = "N";   
                    beverage = "beverage";
                }
                else if(currentInput.equalsIgnoreCase("Fruit")){
                    des[0] = "N";
                    des[1] = "Y";
                    des[2] = "N";
                    fruit = "fruit";
                }
                else if(currentInput.equalsIgnoreCase("Other")){
                    des[0] = "N";
                    des[1] = "N";
                    des[2] = "Y"; 
                    dessertother = "other";
                }
            }
        }
    }//GEN-LAST:event_DButtonActionPerformed

    private void readyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readyButtonActionPerformed
        if(typeReady == true && preferencesReady == true){
            //Inputs
            String result = "";
            //The preferences Inputs in an array that is the same format as foodRecommend
            inputs[0] = spice;
            inputs[1] = hot;
            inputs[2] = Double.toString(price);
            inputs[3] = Integer.toString(calorie);
            inputs[4] = restrictions;
            //Meal type input in the same format as foodRecommend
            String desired = askForType();
            
            //For the food type inpput, just directly write app and salad etc, they are global variables
            FoodRecommend f = new FoodRecommend();

            //call from appetizer subclass
            if(desired.equalsIgnoreCase("Appetizers")){
                Appetizers a = new Appetizers("", Double.parseDouble(inputs[2]), inputs[4], Integer.parseInt(inputs[3]), inputs[0], inputs[1], app[0], app[1], app[2]);
                try {
                    result = a.printAppetizers();
                } catch (IOException ex) {
                    Logger.getLogger(FoodGui.class.getName()).log(Level.SEVERE, null, ex);
                }
            }            

            //call from entree subclass
            else if(desired.equalsIgnoreCase("Entree")){
                Entree e = new Entree("", Double.parseDouble(inputs[2]), inputs[4], Integer.parseInt(inputs[3]), inputs[0], inputs[1], app[0], app[1], app[2]);
                try {
                     result = e.printEntree();
                } catch (IOException ex) {
                    Logger.getLogger(FoodGui.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            //call from desserts subclass
            else{       
                Desserts d = new Desserts("", Double.parseDouble(inputs[2]), inputs[4], Integer.parseInt(inputs[3]), inputs[0], inputs[1], app[0], app[1], app[2]);
                try {
                    result = d.printDesserts();
                } catch (IOException ex) {
                    Logger.getLogger(FoodGui.class.getName()).log(Level.SEVERE, null, ex);
                }
            }    
            
            FinalOutput.setText(result);

            //Output
            //Instead of f.printDesiredInput(desired), return a string and print the string 
            //in the output the result in the FinalOutput.setText()
            
        }
        else if (typeReady == false && preferencesReady== false){
            IncorrectInput.setText("You have not entered what type of food you want,\n nor your preferences");
        }
        else if (typeReady == false){
            IncorrectInput.setText("You have not entered what type of food you want.");
        }
        else{
            IncorrectInput.setText("You have not entered your preferences.");
        }
        
    }//GEN-LAST:event_readyButtonActionPerformed
//Code for if the user want the food to be hot or not
    private void hotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hotButtonActionPerformed

        if(hot.equals("Cold")){
            hot = "Hot";
        }
        else{
            hot = "Cold";
        }
    }//GEN-LAST:event_hotButtonActionPerformed
//Code for if the user want the food to be spicy or not
    private void SpiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SpiceButtonActionPerformed
        // TODO add your handling code here:
        if(spice.equals("Mild")){
            spice = "Hot";
        }
        else{
            spice = "Mild";
        }
    }//GEN-LAST:event_SpiceButtonActionPerformed

    private void cActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cActionPerformed

    private void pActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pActionPerformed

    private void rActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rActionPerformed

    // The follwing three methods are for the user attempt to enter the food type before selecting the meal type
    private void AppetizerTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AppetizerTypeActionPerformed
        // TODO add your handling code here:
        if (wantAppetizer ==  false){
            IncorrectInput.setText("You have not selected appetizers, please select first.");
        }
    }//GEN-LAST:event_AppetizerTypeActionPerformed

    private void EntreeTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EntreeTypeActionPerformed
        if (wantEntree ==  false){
            IncorrectInput.setText("You have not selected Entree, please select first.");
        }
    }//GEN-LAST:event_EntreeTypeActionPerformed

    private void DessertTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DessertTypeActionPerformed
        if (wantDessert ==  false){
            IncorrectInput.setText("You have not selected Desserts, please select first.");
        }
    }//GEN-LAST:event_DessertTypeActionPerformed

    private void currentTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_currentTypeActionPerformed

    //Reset the meal type and food type
    @SuppressWarnings("empty-statement")
    private void ResetTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetTypeActionPerformed

       currentType.setText("Current type: None");
       wantAppetizer = false;
       AppetizerType.setText("Appetizer type");
       wantEntree = false;
       EntreeType.setText("Entree type");
       wantDessert = false;
       DessertType.setText("Dessert type");
       
       typeReady = false;
       
       bread = "";
       salad = "";
       soup = "";
       meat = "";
       seafood = "";
       noodles = "";
       beverage = "";
       fruit = "";
       dessertother = "";
       
       for(int n = 0; n<3;n++){
           app[n]="N";
           ent[n]="N";
           des[n]="N";         
       }
       IncorrectInput.setText("");
       
    }//GEN-LAST:event_ResetTypeActionPerformed
    
    //Reset the preferences
    private void ResetPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetPActionPerformed
        // TODO add your handling code here:
        price = -1;
        calorie = -1;
        restrictions = "none";
        preferencesReady = false;
        
        p.setText("Price");
        c.setText("Calorie");
        r.setText("Restrictions");
        IncorrectInput.setText("");
    }//GEN-LAST:event_ResetPActionPerformed

    private void ClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearAllActionPerformed
        // TODO add your handling code here:
        FinalOutput.setText("");
        
        price = -1;
        calorie = -1;
        restrictions = "none";
        preferencesReady = false;
        
        p.setText("Price");
        c.setText("Calorie");
        r.setText("Restrictions");
        IncorrectInput.setText("");
        
       currentType.setText("Current type: None");
       wantAppetizer = false;
       AppetizerType.setText("Appetizer type");
       wantEntree = false;
       EntreeType.setText("Entree type");
       wantDessert = false;
       DessertType.setText("Dessert type");
       
       typeReady = false;
       
       bread = "";
       salad = "";
       soup = "";
       meat = "";
       seafood = "";
       noodles = "";
       beverage = "";
       fruit = "";
       dessertother = "";
       
       for(int n = 0; n<3;n++){
           app[n]="N";
           ent[n]="N";
           des[n]="N";         
       }
       IncorrectInput.setText("");
    }//GEN-LAST:event_ClearAllActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FoodGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FoodGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FoodGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FoodGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FoodGui().setVisible(true);
            }
        });
    }
    //Check if the input is integer or double or neither
    public static String checkIntegerDouble(String s){
    //Making the string array or characters that are not number    
        String [] notNumber = new String[244];
        boolean work = true;
        int n = 0;
        
        for(n=0; n<46;n++){
            notNumber[n]=Character.toString((char)n);
        }
        notNumber[46]=Character.toString((char)47);
        for(n=58;n<255;n++){
            notNumber[n-11]=Character.toString((char)n);
        }
        
   //If the input contain any of the character that is not a number, it is not a interger nor a double     
        for(int i = 0;i<notNumber.length;i++){
            if(s.contains(notNumber[i])){
                work = false;
                break;
            }
        }
    //If the string contians only number and "."    
        if(work == true && s.indexOf(".")!=s.length()-1){
            // if the string contain "."
            if(s.contains(".")){
                if(s.indexOf(".") >= s.length()-3&&
                        (s.substring(s.indexOf(".")+1).contains("."))==false){
                    return ("double");
                }
                else{
                    return ("character");
                }
            } 
            //If the string does not contain "."
            else return ("integer");
        }
    //
        else return ("character");

    }

    public String askForType(){
        if(wantAppetizer == true) return "Appetizers";
        else if (wantEntree == true) return "Entree";
        else return "Desserts";
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AButton;
    private javax.swing.JTextField AppetizerType;
    private javax.swing.JButton ButtonPreference;
    private javax.swing.JButton ClearAll;
    private javax.swing.JButton DButton;
    private javax.swing.JTextField DessertType;
    private javax.swing.JButton EButton;
    private javax.swing.JTextField EntreeType;
    private javax.swing.JTextArea FinalOutput;
    private javax.swing.JTextArea IncorrectInput;
    private javax.swing.JButton ResetP;
    private javax.swing.JButton ResetType;
    private javax.swing.JRadioButton SpiceButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JTextField c;
    private javax.swing.JTextField currentType;
    private javax.swing.JRadioButton hotButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField p;
    private javax.swing.JTextField r;
    private javax.swing.JButton readyButton;
    // End of variables declaration//GEN-END:variables
}
